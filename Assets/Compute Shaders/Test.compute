// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise3D.hlsl"

struct Voxel 
{
    float value;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> Result;

uint Resolution;
float3 Offset;
float3 Size;
float4 _Time;

#define ITERATION (1u << 0)

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float val = 0;

    uint index = id.x + Resolution * (id.y + Resolution * id.z);

    val = abs(ClassicNoise(float3(id.xyz) / Resolution * Size + Offset));

    Result[index] = val;
}
